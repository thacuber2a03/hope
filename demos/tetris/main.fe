; not yet done

(require "list.fe")

(macro for (var lst . body)
	(list 'do
		(list 'let 'lst lst)
		(list 'while 'lst
			(list 'let var (list 'car 'lst))
			(cons 'do body)
			(list '= 'lst (list 'cdr 'lst))
		)
	)
)

(func range (n)
	(let res nil)
	(while (> n 0)
		(list:push res n)
		(dec n)
	)
	res
)

(func hope:init ()
	(= gridXSize 12)
	(= gridYSize 20)

	(= grid nil)
	(for y (range gridYSize)
		(let res nil)
		(for x (range gridXSize) (list:push res 0))
		(list:push grid res)
	)
)

(func hope:update ()
	(if (hope:key-down "escape") (hope:quit))
)
